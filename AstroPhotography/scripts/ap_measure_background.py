#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  ap_measure_background.py
#
#  Measures and outputs large scale non-uniform sky backgrounds left 
#  by imperfect bias/dark/flat calibration.
#  
#  Copyright 2021 Dave Strickland <dave.strickland@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  2021-05-29 dks : Initial skeleton. 
#  2021-08-19 dks : Add nbg_cols, nbg_rows, min_bg_width min_bg_height
#  2021-08-21 dks : Add bg_filter_width, bg_badbox_pctile, bg_sigmaclip

import argparse
import sys
import logging

import AstroPhotography as ap

def command_line_opts(argv):
    """ Parse command line arguments.

    :param argv: argument list to parse
    """
    parser = argparse.ArgumentParser(prog='ap_measure_background',
        description=('Measures and outputs large scale non-uniform sky'
        ' backgrounds left by imperfect bias/dark/flat calibration.'
        ' This uses the photutils.background package. Successful'
        ' background estimation may require you to experiment with'
        ' the options that control the background region box size'
        ' and filtering parameters.'))
        
    # Required
    parser.add_argument('input',
        metavar='INPUT_IMAGE.FITS',
        help='Path/name of the input image that the background will be measured in.')
    parser.add_argument('outputbg',
        metavar='OUTPUT_BG.FITS',
        help=('Path/name of the output estimate of the large scale background.'
        ' This can be subtracted from the input image using ap_imarith.py.'))
        
    # Optional
    p_nbg_cols          = 16
    p_nbg_rows          = 16
    p_min_bghght        = 48
    p_min_bgwdth        = 48
    p_bg_filter_width   = 4
    p_bg_badbox_pctile  = 25.0
    p_bg_sigmaclip      = 3.0
    
    parser.add_argument('--srclist',
        metavar='SRCLIST.FITS',
        default=None,
        help=('Optional source list to use to exclude stars when generating'
        ' the background estimate. The format of the file should match that'
        ' generated by ap_find_stars.py. If this is NOT supplied then' 
        ' ApFindStars will be used to find and remove stars.'))
    parser.add_argument('--nbg_cols',
        metavar='NUM_BGCOLS',
        type=int,
        default=p_nbg_cols,
        help=('Number of regions to split the image into width-wise'
        ' to assess the local background in.'
        f' Default: {p_nbg_cols}'))
    parser.add_argument('--nbg_rows',
        metavar='NUM_BGROWS',
        type=int,
        default=p_nbg_rows,
        help=('Number of regions to split the image into height-wise'
        ' to assess the local background in.'
        f' Default: {p_nbg_rows}'))
    parser.add_argument('--min_bgwidth',
        metavar='MIN_BGWIDTH',
        type=int,
        default=p_min_bgwdth,
        help=('Minimum width in pixels of a background region.'
        ' The width of a background region in an image of NCOLS columns'
        ' is max(MIN_BGWIDTH, 2*int(NCOLS/2*NUM_BGCOLS) pixels.'
        f' Default: {p_min_bgwdth} pixels'))
    parser.add_argument('--min_bgheight',
        metavar='MIN_BGHEIGHT',
        type=int,
        default=p_min_bghght,
        help=('Minimum height in pixels of a background region.'
        ' The height of a background region in an image of NROWS rows'
        ' is max(MIN_BGHEIGHT, 2*int(NROWS/2*NUM_BGROWS) pixels.'
        f' Default: {p_min_bghght} pixels'))
    parser.add_argument('--bg_filter_width',
        metavar='FILTER_WIDTH',
        type=int,
        default=p_bg_filter_width,
        help=('Photutils Background2D filter size'
        ' parameter, used to median filter the course background values.'
        f' Default: {p_bg_filter_width} course boxes.'))
    parser.add_argument('--bg_badbox_pctile',
        metavar='PERCENTILE',
        type=float,
        default=p_bg_badbox_pctile,
        help=('Photutils Background2D exclude_percentile'
        ' parameter, used to mark the course background cells to bad if'
        '  more than this percentage of their pixels are excluded or masked.'
        f' Default: {p_bg_badbox_pctile:.2f} percent.'))
    parser.add_argument('--bg_sigmaclip',
        metavar='NSIGMA',
        type=float,
        default=p_bg_sigmaclip,
        help=('Photutils Background2D sigma_clip parameter,'
        ' used to sigma clipping on the pixel values within each course'
        f' background box. Default: {p_bg_sigmaclip:.2f} sigma.'))

        
    parser.add_argument('-l', '--loglevel', 
        default='INFO',
        help='Logging message level. Default: INFO')

    args = parser.parse_args(argv)
    return args

                
def main(args=None):
    p_args              = command_line_opts(args)
    p_input             = p_args.input
    p_outputbg          = p_args.outputbg
    p_srclist           = p_args.srclist
    p_nbg_cols          = p_args.nbg_cols
    p_nbg_rows          = p_args.nbg_rows
    p_min_bgwdth        = p_args.min_bgwidth
    p_min_bghght        = p_args.min_bgheight
    p_bg_filter_width   = p_args.bg_filter_width
    p_bg_badbox_pctile  = p_args.bg_badbox_pctile
    p_bg_sigmaclip      = p_args.bg_sigmaclip
    p_loglevel          = p_args.loglevel
    
    measurebg = ap.ApMeasureBackground(p_loglevel)
    measurebg.process_files(p_input, 
        p_srclist,
        p_nbg_rows, p_nbg_cols,
        p_min_bghght, p_min_bgwdth,
        p_bg_filter_width, 
        p_bg_badbox_pctile, 
        p_bg_sigmaclip)
    measurebg.write_bgimage(p_outputbg)
    return 0

if __name__ == '__main__':
    try:
        status = main()
    except:
        logging.getLogger(__name__).critical("Shutting down due to fatal error")
        raise  # print stack trace
    else:
        raise SystemExit(status)
