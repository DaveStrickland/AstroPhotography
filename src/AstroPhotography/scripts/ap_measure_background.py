#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  ap_measure_background.py
#
#  Measures and outputs large scale non-uniform sky backgrounds left 
#  by imperfect bias/dark/flat calibration.
#  
#  Copyright 2021 Dave Strickland <dave.strickland@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  2021-05-29 dks : Initial skeleton. 


import argparse
import sys
import logging

import AstroPhotography as ap

def command_line_opts(argv):
    """ Parse command line arguments.

    :param argv: argument list to parse
    """
    parser = argparse.ArgumentParser(prog='ap_measure_background',
        description=('Measures and outputs large scale non-uniform sky'
        ' backgrounds left by imperfect bias/dark/flat calibration.'))
        
    # Required
    parser.add_argument('input',
        metavar='INPUT_IMAGE.FITS',
        help='Path/name of the input image that the background will be measured in.')
    parser.add_argument('outputbg',
        metavar='OUTPUT_BG.FITS',
        help=('Path/name of the output estimate of the large scale background.'
        ' This can be subtracted from the input image using ap_imarith.py.'))
        
    # Optional
    parser.add_argument('--srclist',
        metavar='SRCLIST.FITS',
        default=None,
        help=('Optional source list to use to exclude stars when generating'
        ' the background estimate. The format of the file should match that'
        ' generated by ap_find_stars.py. If this is NOT supplied then' 
        ' ApFindStars will be used to find and remove stars.'))
    parser.add_argument('-l', '--loglevel', 
        default='INFO',
        help='Logging message level. Default: INFO')
                
    args = parser.parse_args(argv)
    return args

                
def main(args=None):
    p_args     = command_line_opts(args)
    p_input    = p_args.input
    p_outputbg = p_args.outputbg
    p_srclist  = p_args.srclist
    p_loglevel = p_args.loglevel
    
    measurebg = ap.ApMeasureBackground(p_loglevel)
    measurebg.process_files(p_input, p_srclist)
    measurebg.write_bgimage(p_outputbg)
    return 0

if __name__ == '__main__':
    try:
        status = main()
    except:
        logging.getLogger(__name__).critical("Shutting down due to fatal error")
        raise  # print stack trace
    else:
        raise SystemExit(status)
