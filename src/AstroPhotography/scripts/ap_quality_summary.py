#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  ap_quality_summary.py
#
#  Reads the quality files produced by ap_find_stars.py and writes a
#  summary CSV.
#  
#  Copyright 2020 Dave Strickland <dave.strickland@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  2020-09-04 dks 
# 

import argparse
import sys
import logging
from pathlib import Path
import yaml

def command_line_opts(argv):
    """ Parse command line arguments.

    :param argv: argument list to parse
    """
    parser = argparse.ArgumentParser(prog='ap_quality_summary',
        description='Generate a CSV summary of all quality yaml files' +
        ' within a specified directory or directory tree.')
        
    # Required
    parser.add_argument('qualfile_dir',
        help='Path of directory under which all quality files are to be found.' +
            ' By default only files within that specific directory will be used.')
    parser.add_argument('summary_file',
        metavar='OUTPUT.CSV',
        help='Name of output summary CSV to generate.')
        
    # Defaults.
    p_qual_pref = 'qual'
    p_qual_suff = '.yaml'
        
    # Optional
    parser.add_argument('--prefix',
        default=p_qual_pref,
        help=f'File prefix for quality files. Default: {p_qual_pref}')
    parser.add_argument('--suffix',
        default=p_qual_suff,
        help=f'File suffic for quality files. Default: {p_qual_suff}')
    parser.add_argument('--walk_tree',
        default=False,
        action='store_true',
        help=' If specified all directories under qualfile_dir' + 
            ' will be traversed looking for quality files.')
    parser.add_argument('-l', '--loglevel', 
        default='INFO',
        help='Logging message level. Default: INFO')
                
    args = parser.parse_args(argv)
    return args

class ApQualitySummarizer:
    """Summarizes all quality yaml files generated by ApFindStars or
       ap_find_stars.py, writing a single multi-column CSV as output.
    """
    
    def __init__(self, qualdir, 
        sumfile,
        loglevel, 
        walktree,
        qual_pref, 
        qual_suff):
    
        # Initialize logging
        self._loglevel = loglevel
        self._initialize_logger(self._loglevel)
        
        self._qualdir   = qualdir
        self._sumfile   = sumfile
        self._walktree  = walktree
        self._qual_pref = qual_pref
        self._qual_suff = qual_suff
        
        # Generate a list of all the files as pathlib Paths.
        self._path_list = []
        self._find_files()
        
        # Read the data
        self._read_files()
        
        return
        
    def _find_files(self):
        """Find all quality files in the specified directory or 
           directory tree.
           
        This function builds a list of pathlib Path objects, not file
        name strings.
        """
        
        # File pattern to look for
        file_pattern = f'{self._qual_pref}*{self._qual_suff}'
        
        # Info message
        in_or_under  = 'in'
        if self._walktree:
            in_or_under = 'under'
        self._logger.info(f'Searching for file matching pattern "{file_pattern}" {in_or_under} {self._qualdir}')
       
        # If walktree is True use rglob, otherwise glob
        if self._walktree:
            for globbed in Path(self._qualdir).rglob(file_pattern):
                self._path_list.append( globbed )
        else:
            for globbed in Path(self._qualdir).glob(file_pattern):
                self._path_list.append( globbed )
        
        num_files = len(self._path_list)
        self._logger.debug(f'Found {num_files} matching path and pattern.')
        return
        
    def _initialize_logger(self, loglevel):
        """Initialize and return the logger
        """
        
        self._logger = logging.getLogger('ApQualitySummarizer')
        
        # Check that the input log level is legal
        numeric_level = getattr(logging, loglevel.upper(), None)
        if not isinstance(numeric_level, int):
            raise ValueError('Invalid log level: {}'.format(loglevel))
        self._logger.setLevel(numeric_level)
    
        # create console handler and set level to debug
        ch = logging.StreamHandler()
        ch.setLevel(numeric_level)
    
        # create formatter
        formatter = logging.Formatter('%(asctime)s | %(name)s | %(levelname)s | %(message)s')
    
        # add formatter to ch
        ch.setFormatter(formatter)
    
        # add ch to logger
        self._logger.addHandler(ch)
        return
        
    def _read_files(self):
        """Read all the yaml files"""
        
        # This creates several dictionaries, storing the main yaml
        # data in a list.
      
        # List of yaml dictionaries stored by index.
        self._data_list = []
        
        # Dictionary of unique target/telescope/filter combo with a list
        # of the index/indices within self._data_list at which the yaml
        # data can be found.
        self._index_dict = {}
        
        num_paths = len(self._path_list)
        for idx in range(num_paths):
            path_obj = self._path_list[idx]
            with path_obj.open(mode='r') as f_handle:
                data = yaml.load(f_handle, Loader=yaml.FullLoader)
                if 'image_info' in data:
                    a_target    = data['image_info']['object'].strip()
                    a_telescope = data['image_info']['telescope'].strip()
                    a_filter    = data['image_info']['filter'].strip()
                    
                    # Create key for target/telescope/filter combo
                    key = f'{a_target}:{a_telescope}:{a_filter}'.replace(' ', '_')
                    self._data_list.append( data )
                    if key in self._index_dict:
                        # Key already exists, add to list
                        self._index_dict[key].append( idx )
                    else:
                        # Key does not exist, create key/value pair
                        self._index_dict[key] = [ idx ]
                else:
                    self._logger.warning(f'Input file {str(path_obj)} lacks image_info data. Skipping this file.')
                    
        # Report the number of unique target/telescope/filter groups
        num_groups = len(self._index_dict)
        key_list = []
        for key in self._index_dict:
            key_list.append(key)
        key_str = ', '.join(key_list)
        self._logger.info(f'There are {num_groups} unique target/telescope/filter groupings: {key_str}')
        return
        
    def _check_file_exists(self, filename):
        if not os.path.isfile(filename):
            err_msg = f'Cannot find {filename}. Not a valid path or file.'
            self._logger.error(err_msg)
            self._status = ApAstrometry.INPUT_ERROR


def main(args=None):
    p_args      = command_line_opts(args)
    p_qualdir   = p_args.qualfile_dir
    p_sumfile   = p_args.summary_file
    p_loglevel  = p_args.loglevel 
    p_walk_tree = p_args.walk_tree
    p_qual_pref = p_args.prefix
    p_qual_suff = p_args.suffix
    
    summarizer = ApQualitySummarizer(p_qualdir, p_sumfile,
        p_loglevel, p_walk_tree,
        p_qual_pref, p_qual_suff)
    return 0

if __name__ == '__main__':
    try:
        status = main()
    except:
        logging.getLogger(__name__).critical("Shutting down due to fatal error")
        raise  # print stack trace
    else:
        raise SystemExit(status)
